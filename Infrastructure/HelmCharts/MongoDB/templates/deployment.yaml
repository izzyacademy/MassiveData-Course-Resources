apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.infrastructure.appName }}
  namespace: "{{ .Values.infrastructure.namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.application.labelValue }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ .Values.application.labelValue }}
    spec:
      containers:
      - image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
        name: {{ .Values.infrastructure.appName }}
        resources:
          requests:
            memory: "{{ .Values.resources.requests.memory }}"
            cpu: "{{ .Values.resources.requests.cpu }}"
          limits:
            memory: "{{ .Values.resources.limits.memory }}"
            cpu: "{{ .Values.resources.limits.cpu }}"
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: admin
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: mong044120
        ports:
        - containerPort: {{ .Values.service.port }}
          name: mysql
        volumeMounts:
        - name: "{{ .Values.infrastructure.appName }}-volume"
          mountPath: "{{ .Values.resources.volume.path }}"
      volumes:
      - name: "{{ .Values.infrastructure.appName }}-volume"
        persistentVolumeClaim:
          claimName: "{{ .Values.infrastructure.appName }}-persistent-storage"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{ .Values.infrastructure.appName }}-persistent-storage"
  namespace: "{{ .Values.infrastructure.namespace }}"
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: {{ .Values.resources.volume.storageClass }}
  resources:
    requests:
      storage: {{ .Values.resources.volume.size }}